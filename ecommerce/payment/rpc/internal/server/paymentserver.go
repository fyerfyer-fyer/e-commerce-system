// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: payment.proto

package server

import (
	"context"

	"github.com/fyerfyer/e-commerce-system/ecommerce/payment/rpc/internal/logic"
	"github.com/fyerfyer/e-commerce-system/ecommerce/payment/rpc/internal/svc"
	"github.com/fyerfyer/e-commerce-system/ecommerce/payment/rpc/payment"
)

type PaymentServer struct {
	svcCtx *svc.ServiceContext
	payment.UnimplementedPaymentServer
}

func NewPaymentServer(svcCtx *svc.ServiceContext) *PaymentServer {
	return &PaymentServer{
		svcCtx: svcCtx,
	}
}

func (s *PaymentServer) MakePayment(ctx context.Context, in *payment.PaymentRequest) (*payment.PaymentResponse, error) {
	l := logic.NewMakePaymentLogic(ctx, s.svcCtx)
	return l.MakePayment(in)
}

func (s *PaymentServer) GetPaymentStatus(ctx context.Context, in *payment.GetPaymentStatusRequest) (*payment.GetPaymentStatusResponse, error) {
	l := logic.NewGetPaymentStatusLogic(ctx, s.svcCtx)
	return l.GetPaymentStatus(in)
}

func (s *PaymentServer) Refund(ctx context.Context, in *payment.RefundRequest) (*payment.RefundResponse, error) {
	l := logic.NewRefundLogic(ctx, s.svcCtx)
	return l.Refund(in)
}
