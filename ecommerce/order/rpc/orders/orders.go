// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: order.proto

package orders

import (
	"context"

	"github.com/fyerfyer/e-commerce-system/ecommerce/order/rpc/order"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DeleteOrderRequest    = order.DeleteOrderRequest
	EditOrderRequest      = order.EditOrderRequest
	Empty                 = order.Empty
	GetOrderItemsRequest  = order.GetOrderItemsRequest
	GetOrderItemsResponse = order.GetOrderItemsResponse
	GetOrderRequest       = order.GetOrderRequest
	GetOrdersRequest      = order.GetOrdersRequest
	GetOrdersResponse     = order.GetOrdersResponse
	Order                 = order.Order
	OrderItem             = order.OrderItem
	PaymentInfo           = order.PaymentInfo
	SubmitOrderRequest    = order.SubmitOrderRequest
	SubmitOrderResponse   = order.SubmitOrderResponse

	Orders interface {
		GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error)
		GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error)
		SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*SubmitOrderResponse, error)
		EditOrder(ctx context.Context, in *EditOrderRequest, opts ...grpc.CallOption) (*Empty, error)
		DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*Empty, error)
		GetOrderItems(ctx context.Context, in *GetOrderItemsRequest, opts ...grpc.CallOption) (*GetOrderItemsResponse, error)
	}

	defaultOrders struct {
		cli zrpc.Client
	}
)

func NewOrders(cli zrpc.Client) Orders {
	return &defaultOrders{
		cli: cli,
	}
}

func (m *defaultOrders) GetOrders(ctx context.Context, in *GetOrdersRequest, opts ...grpc.CallOption) (*GetOrdersResponse, error) {
	client := order.NewOrdersClient(m.cli.Conn())
	return client.GetOrders(ctx, in, opts...)
}

func (m *defaultOrders) GetOrder(ctx context.Context, in *GetOrderRequest, opts ...grpc.CallOption) (*Order, error) {
	client := order.NewOrdersClient(m.cli.Conn())
	return client.GetOrder(ctx, in, opts...)
}

func (m *defaultOrders) SubmitOrder(ctx context.Context, in *SubmitOrderRequest, opts ...grpc.CallOption) (*SubmitOrderResponse, error) {
	client := order.NewOrdersClient(m.cli.Conn())
	return client.SubmitOrder(ctx, in, opts...)
}

func (m *defaultOrders) EditOrder(ctx context.Context, in *EditOrderRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := order.NewOrdersClient(m.cli.Conn())
	return client.EditOrder(ctx, in, opts...)
}

func (m *defaultOrders) DeleteOrder(ctx context.Context, in *DeleteOrderRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := order.NewOrdersClient(m.cli.Conn())
	return client.DeleteOrder(ctx, in, opts...)
}

func (m *defaultOrders) GetOrderItems(ctx context.Context, in *GetOrderItemsRequest, opts ...grpc.CallOption) (*GetOrderItemsResponse, error) {
	client := order.NewOrdersClient(m.cli.Conn())
	return client.GetOrderItems(ctx, in, opts...)
}
