// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: reply.proto

package replyservice

import (
	"context"

	"github.com/fyerfyer/e-commerce-system/ecommerce/reply/rpc/reply"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddReplyRequest    = reply.AddReplyRequest
	DeleteReplyRequest = reply.DeleteReplyRequest
	EditReplyRequest   = reply.EditReplyRequest
	Empty              = reply.Empty
	GetRepliesRequest  = reply.GetRepliesRequest
	GetRepliesResponse = reply.GetRepliesResponse
	GetReplyRequest    = reply.GetReplyRequest
	Reply              = reply.Reply

	ReplyService interface {
		GetReplies(ctx context.Context, in *GetRepliesRequest, opts ...grpc.CallOption) (*GetRepliesResponse, error)
		GetReply(ctx context.Context, in *GetReplyRequest, opts ...grpc.CallOption) (*Reply, error)
		AddReply(ctx context.Context, in *AddReplyRequest, opts ...grpc.CallOption) (*Empty, error)
		EditReply(ctx context.Context, in *EditReplyRequest, opts ...grpc.CallOption) (*Empty, error)
		DeleteReply(ctx context.Context, in *DeleteReplyRequest, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultReplyService struct {
		cli zrpc.Client
	}
)

func NewReplyService(cli zrpc.Client) ReplyService {
	return &defaultReplyService{
		cli: cli,
	}
}

func (m *defaultReplyService) GetReplies(ctx context.Context, in *GetRepliesRequest, opts ...grpc.CallOption) (*GetRepliesResponse, error) {
	client := reply.NewReplyServiceClient(m.cli.Conn())
	return client.GetReplies(ctx, in, opts...)
}

func (m *defaultReplyService) GetReply(ctx context.Context, in *GetReplyRequest, opts ...grpc.CallOption) (*Reply, error) {
	client := reply.NewReplyServiceClient(m.cli.Conn())
	return client.GetReply(ctx, in, opts...)
}

func (m *defaultReplyService) AddReply(ctx context.Context, in *AddReplyRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := reply.NewReplyServiceClient(m.cli.Conn())
	return client.AddReply(ctx, in, opts...)
}

func (m *defaultReplyService) EditReply(ctx context.Context, in *EditReplyRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := reply.NewReplyServiceClient(m.cli.Conn())
	return client.EditReply(ctx, in, opts...)
}

func (m *defaultReplyService) DeleteReply(ctx context.Context, in *DeleteReplyRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := reply.NewReplyServiceClient(m.cli.Conn())
	return client.DeleteReply(ctx, in, opts...)
}
