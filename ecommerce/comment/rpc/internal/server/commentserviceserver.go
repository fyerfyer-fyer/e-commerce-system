// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: comment.proto

package server

import (
	"context"

	"github.com/fyerfyer/e-commerce-system/ecommerce/comment/rpc/comment"
	"github.com/fyerfyer/e-commerce-system/ecommerce/comment/rpc/internal/logic"
	"github.com/fyerfyer/e-commerce-system/ecommerce/comment/rpc/internal/svc"
)

type CommentServiceServer struct {
	svcCtx *svc.ServiceContext
	comment.UnimplementedCommentServiceServer
}

func NewCommentServiceServer(svcCtx *svc.ServiceContext) *CommentServiceServer {
	return &CommentServiceServer{
		svcCtx: svcCtx,
	}
}

func (s *CommentServiceServer) GetComments(ctx context.Context, in *comment.GetCommentsRequest) (*comment.GetCommentsResponse, error) {
	l := logic.NewGetCommentsLogic(ctx, s.svcCtx)
	return l.GetComments(in)
}

func (s *CommentServiceServer) GetComment(ctx context.Context, in *comment.GetCommentRequest) (*comment.Comment, error) {
	l := logic.NewGetCommentLogic(ctx, s.svcCtx)
	return l.GetComment(in)
}

func (s *CommentServiceServer) AddComment(ctx context.Context, in *comment.AddCommentRequest) (*comment.Empty, error) {
	l := logic.NewAddCommentLogic(ctx, s.svcCtx)
	return l.AddComment(in)
}

func (s *CommentServiceServer) EditComment(ctx context.Context, in *comment.EditCommentRequest) (*comment.Empty, error) {
	l := logic.NewEditCommentLogic(ctx, s.svcCtx)
	return l.EditComment(in)
}

func (s *CommentServiceServer) DeleteComment(ctx context.Context, in *comment.DeleteCommentRequest) (*comment.Empty, error) {
	l := logic.NewDeleteCommentLogic(ctx, s.svcCtx)
	return l.DeleteComment(in)
}
