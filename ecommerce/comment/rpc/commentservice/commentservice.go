// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.3
// Source: comment.proto

package commentservice

import (
	"context"

	"github.com/fyerfyer/e-commerce-system/ecommerce/comment/rpc/comment"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AddCommentRequest    = comment.AddCommentRequest
	Comment              = comment.Comment
	DeleteCommentRequest = comment.DeleteCommentRequest
	EditCommentRequest   = comment.EditCommentRequest
	Empty                = comment.Empty
	GetCommentRequest    = comment.GetCommentRequest
	GetCommentsRequest   = comment.GetCommentsRequest
	GetCommentsResponse  = comment.GetCommentsResponse

	CommentService interface {
		GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error)
		GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*Comment, error)
		AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*Empty, error)
		EditComment(ctx context.Context, in *EditCommentRequest, opts ...grpc.CallOption) (*Empty, error)
		DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*Empty, error)
	}

	defaultCommentService struct {
		cli zrpc.Client
	}
)

func NewCommentService(cli zrpc.Client) CommentService {
	return &defaultCommentService{
		cli: cli,
	}
}

func (m *defaultCommentService) GetComments(ctx context.Context, in *GetCommentsRequest, opts ...grpc.CallOption) (*GetCommentsResponse, error) {
	client := comment.NewCommentServiceClient(m.cli.Conn())
	return client.GetComments(ctx, in, opts...)
}

func (m *defaultCommentService) GetComment(ctx context.Context, in *GetCommentRequest, opts ...grpc.CallOption) (*Comment, error) {
	client := comment.NewCommentServiceClient(m.cli.Conn())
	return client.GetComment(ctx, in, opts...)
}

func (m *defaultCommentService) AddComment(ctx context.Context, in *AddCommentRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := comment.NewCommentServiceClient(m.cli.Conn())
	return client.AddComment(ctx, in, opts...)
}

func (m *defaultCommentService) EditComment(ctx context.Context, in *EditCommentRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := comment.NewCommentServiceClient(m.cli.Conn())
	return client.EditComment(ctx, in, opts...)
}

func (m *defaultCommentService) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...grpc.CallOption) (*Empty, error) {
	client := comment.NewCommentServiceClient(m.cli.Conn())
	return client.DeleteComment(ctx, in, opts...)
}
