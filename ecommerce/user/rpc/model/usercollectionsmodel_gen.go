// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userCollectionsFieldNames          = builder.RawFieldNames(&UserCollections{})
	userCollectionsRows                = strings.Join(userCollectionsFieldNames, ",")
	userCollectionsRowsExpectAutoSet   = strings.Join(stringx.Remove(userCollectionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userCollectionsRowsWithPlaceHolder = strings.Join(stringx.Remove(userCollectionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userCollectionsModel interface {
		Insert(ctx context.Context, data *UserCollections) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserCollections, error)
		FindOneByUserIdProductId(ctx context.Context, userId int64, productId int64) (*UserCollections, error)
		Update(ctx context.Context, data *UserCollections) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserCollectionsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserCollections struct {
		Id        int64     `db:"id"`         // Collection entry ID
		UserId    int64     `db:"user_id"`    // User ID
		ProductId int64     `db:"product_id"` // Product ID (linked to product service)
		CreatedAt time.Time `db:"created_at"` // Time the product was added
	}
)

func newUserCollectionsModel(conn sqlx.SqlConn) *defaultUserCollectionsModel {
	return &defaultUserCollectionsModel{
		conn:  conn,
		table: "`user_collections`",
	}
}

func (m *defaultUserCollectionsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserCollectionsModel) FindOne(ctx context.Context, id int64) (*UserCollections, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userCollectionsRows, m.table)
	var resp UserCollections
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCollectionsModel) FindOneByUserIdProductId(ctx context.Context, userId int64, productId int64) (*UserCollections, error) {
	var resp UserCollections
	query := fmt.Sprintf("select %s from %s where `user_id` = ? and `product_id` = ? limit 1", userCollectionsRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId, productId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCollectionsModel) Insert(ctx context.Context, data *UserCollections) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userCollectionsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.ProductId)
	return ret, err
}

func (m *defaultUserCollectionsModel) Update(ctx context.Context, newData *UserCollections) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userCollectionsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.UserId, newData.ProductId, newData.Id)
	return err
}

func (m *defaultUserCollectionsModel) tableName() string {
	return m.table
}
