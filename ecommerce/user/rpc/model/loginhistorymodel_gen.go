// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	loginHistoryFieldNames          = builder.RawFieldNames(&LoginHistory{})
	loginHistoryRows                = strings.Join(loginHistoryFieldNames, ",")
	loginHistoryRowsExpectAutoSet   = strings.Join(stringx.Remove(loginHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	loginHistoryRowsWithPlaceHolder = strings.Join(stringx.Remove(loginHistoryFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	loginHistoryModel interface {
		Insert(ctx context.Context, data *LoginHistory) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*LoginHistory, error)
		Update(ctx context.Context, data *LoginHistory) error
		Delete(ctx context.Context, id int64) error
	}

	defaultLoginHistoryModel struct {
		conn  sqlx.SqlConn
		table string
	}

	LoginHistory struct {
		Id        int64          `db:"id"`         // Login history ID
		UserId    int64          `db:"user_id"`    // User ID
		LoginTime time.Time      `db:"login_time"` // Login time
		LoginIp   sql.NullString `db:"login_ip"`
	}
)

func newLoginHistoryModel(conn sqlx.SqlConn) *defaultLoginHistoryModel {
	return &defaultLoginHistoryModel{
		conn:  conn,
		table: "`login_history`",
	}
}

func (m *defaultLoginHistoryModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultLoginHistoryModel) FindOne(ctx context.Context, id int64) (*LoginHistory, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", loginHistoryRows, m.table)
	var resp LoginHistory
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultLoginHistoryModel) Insert(ctx context.Context, data *LoginHistory) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, loginHistoryRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.LoginTime, data.LoginIp)
	return ret, err
}

func (m *defaultLoginHistoryModel) Update(ctx context.Context, data *LoginHistory) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, loginHistoryRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.LoginTime, data.LoginIp, data.Id)
	return err
}

func (m *defaultLoginHistoryModel) tableName() string {
	return m.table
}
