// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userAddressesFieldNames          = builder.RawFieldNames(&UserAddresses{})
	userAddressesRows                = strings.Join(userAddressesFieldNames, ",")
	userAddressesRowsExpectAutoSet   = strings.Join(stringx.Remove(userAddressesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userAddressesRowsWithPlaceHolder = strings.Join(stringx.Remove(userAddressesFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	userAddressesModel interface {
		Insert(ctx context.Context, data *UserAddresses) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserAddresses, error)
		Update(ctx context.Context, data *UserAddresses) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserAddressesModel struct {
		conn  sqlx.SqlConn
		table string
	}

	UserAddresses struct {
		Id           int64          `db:"id"`            // Address ID
		UserId       int64          `db:"user_id"`       // User ID
		AddressLine1 string         `db:"address_line1"` // Address line 1
		AddressLine2 sql.NullString `db:"address_line2"` // Address line 2
		City         string         `db:"city"`          // City
		State        string         `db:"state"`         // State/Province
		PostalCode   string         `db:"postal_code"`   // Postal code
		Country      string         `db:"country"`       // Country
		IsDefault    int64          `db:"is_default"`    // Is default address
		CreatedAt    time.Time      `db:"created_at"`    // Creation time
		UpdatedAt    time.Time      `db:"updated_at"`    // Last update time
	}
)

func newUserAddressesModel(conn sqlx.SqlConn) *defaultUserAddressesModel {
	return &defaultUserAddressesModel{
		conn:  conn,
		table: "`user_addresses`",
	}
}

func (m *defaultUserAddressesModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultUserAddressesModel) FindOne(ctx context.Context, id int64) (*UserAddresses, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userAddressesRows, m.table)
	var resp UserAddresses
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserAddressesModel) Insert(ctx context.Context, data *UserAddresses) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, userAddressesRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.UserId, data.AddressLine1, data.AddressLine2, data.City, data.State, data.PostalCode, data.Country, data.IsDefault)
	return ret, err
}

func (m *defaultUserAddressesModel) Update(ctx context.Context, data *UserAddresses) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userAddressesRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.UserId, data.AddressLine1, data.AddressLine2, data.City, data.State, data.PostalCode, data.Country, data.IsDefault, data.Id)
	return err
}

func (m *defaultUserAddressesModel) tableName() string {
	return m.table
}
