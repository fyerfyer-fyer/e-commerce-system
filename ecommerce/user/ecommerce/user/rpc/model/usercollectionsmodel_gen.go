// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.7.3

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	userCollectionsFieldNames          = builder.RawFieldNames(&UserCollections{})
	userCollectionsRows                = strings.Join(userCollectionsFieldNames, ",")
	userCollectionsRowsExpectAutoSet   = strings.Join(stringx.Remove(userCollectionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	userCollectionsRowsWithPlaceHolder = strings.Join(stringx.Remove(userCollectionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheUserServiceUserCollectionsIdPrefix              = "cache:userService:userCollections:id:"
	cacheUserServiceUserCollectionsUserIdProductIdPrefix = "cache:userService:userCollections:userId:productId:"
)

type (
	userCollectionsModel interface {
		Insert(ctx context.Context, data *UserCollections) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*UserCollections, error)
		FindOneByUserIdProductId(ctx context.Context, userId int64, productId int64) (*UserCollections, error)
		Update(ctx context.Context, data *UserCollections) error
		Delete(ctx context.Context, id int64) error
	}

	defaultUserCollectionsModel struct {
		sqlc.CachedConn
		table string
	}

	UserCollections struct {
		Id        int64     `db:"id"`         // Collection entry ID
		UserId    int64     `db:"user_id"`    // User ID
		ProductId int64     `db:"product_id"` // Product ID (linked to product service)
		CreatedAt time.Time `db:"created_at"` // Time the product was added
	}
)

func newUserCollectionsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultUserCollectionsModel {
	return &defaultUserCollectionsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`user_collections`",
	}
}

func (m *defaultUserCollectionsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	userServiceUserCollectionsIdKey := fmt.Sprintf("%s%v", cacheUserServiceUserCollectionsIdPrefix, id)
	userServiceUserCollectionsUserIdProductIdKey := fmt.Sprintf("%s%v:%v", cacheUserServiceUserCollectionsUserIdProductIdPrefix, data.UserId, data.ProductId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, userServiceUserCollectionsIdKey, userServiceUserCollectionsUserIdProductIdKey)
	return err
}

func (m *defaultUserCollectionsModel) FindOne(ctx context.Context, id int64) (*UserCollections, error) {
	userServiceUserCollectionsIdKey := fmt.Sprintf("%s%v", cacheUserServiceUserCollectionsIdPrefix, id)
	var resp UserCollections
	err := m.QueryRowCtx(ctx, &resp, userServiceUserCollectionsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userCollectionsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCollectionsModel) FindOneByUserIdProductId(ctx context.Context, userId int64, productId int64) (*UserCollections, error) {
	userServiceUserCollectionsUserIdProductIdKey := fmt.Sprintf("%s%v:%v", cacheUserServiceUserCollectionsUserIdProductIdPrefix, userId, productId)
	var resp UserCollections
	err := m.QueryRowIndexCtx(ctx, &resp, userServiceUserCollectionsUserIdProductIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `user_id` = ? and `product_id` = ? limit 1", userCollectionsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, userId, productId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultUserCollectionsModel) Insert(ctx context.Context, data *UserCollections) (sql.Result, error) {
	userServiceUserCollectionsIdKey := fmt.Sprintf("%s%v", cacheUserServiceUserCollectionsIdPrefix, data.Id)
	userServiceUserCollectionsUserIdProductIdKey := fmt.Sprintf("%s%v:%v", cacheUserServiceUserCollectionsUserIdProductIdPrefix, data.UserId, data.ProductId)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, userCollectionsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.UserId, data.ProductId)
	}, userServiceUserCollectionsIdKey, userServiceUserCollectionsUserIdProductIdKey)
	return ret, err
}

func (m *defaultUserCollectionsModel) Update(ctx context.Context, newData *UserCollections) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	userServiceUserCollectionsIdKey := fmt.Sprintf("%s%v", cacheUserServiceUserCollectionsIdPrefix, data.Id)
	userServiceUserCollectionsUserIdProductIdKey := fmt.Sprintf("%s%v:%v", cacheUserServiceUserCollectionsUserIdProductIdPrefix, data.UserId, data.ProductId)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, userCollectionsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.UserId, newData.ProductId, newData.Id)
	}, userServiceUserCollectionsIdKey, userServiceUserCollectionsUserIdProductIdKey)
	return err
}

func (m *defaultUserCollectionsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheUserServiceUserCollectionsIdPrefix, primary)
}

func (m *defaultUserCollectionsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", userCollectionsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultUserCollectionsModel) tableName() string {
	return m.table
}
